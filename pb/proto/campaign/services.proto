syntax = "proto3";

package haf80.api.campaign;

option go_package = "micro/pb/proto/campaign;campaign";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  base_path: "/campaign";
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  }
  security: {
    security_requirement: {
      key: "bearer"
    }
  }
};

service admin {
  // Get the all errors
  rpc GetErrors (google.protobuf.Empty) returns (haf80.api.campaign.ErrorListResponse) {
    option (google.api.http) = {
      get: "/v1/admin/error/list"
    };
  }
  // update the error for specific user ID
  rpc UpdateError (haf80.api.campaign.Error) returns (haf80.api.campaign.ErrorUpdateResponse) {
    option (google.api.http) = {
      post: "/v1/admin/error/update"
      body: "*"
    };
  }
  // Create the error for specific user ID
  rpc CreateError (haf80.api.campaign.CreateErrorRequest) returns (haf80.api.campaign.ErrorCreateResponse) {
    option (google.api.http) = {
      post: "/v1/admin/error/create"
      body: "*"
    };
  }

  //calculate will calculate chance and point by price
  rpc  Calculate(haf80.api.campaign.CalculateRequest) returns (haf80.api.campaign.Response) {
    option (google.api.http) = {
      post: "/v1/admin/calculate"
      body:"*"
    };
  }

}

message CalculateRequest{
  string userId = 1;
  string mobile = 2 ;
  int64 serviceId = 3;
  int64 price = 4;
  string rrn = 5;
}

message Response{
  string message = 1;
}


message Error {
  int32  id = 1;
  string message = 2;
  string lang = 3;
  uint32 httpCode = 4;
  int32  code = 5;
  uint32 serviceCode = 6;
  string status = 7;
  string description = 8;
}


message CreateErrorRequest {
  string message = 1;
  string lang = 2;
  uint32 httpCode = 3;
  int32  code = 4;
  uint32 serviceCode = 5;
  string status = 6;
  string description = 7;
}

message ErrorListResponse {
  uint32 code = 1;
  string message = 2;
  repeated Error data = 3;
}

message ErrorUpdateResponse {
  uint32 code = 1;
  string message = 2;
}
message ErrorCreateResponse{
  uint32 code = 1;
  string message = 2;
}




service Campaign{
  //Calculate will calculate score and chance by serviceId and price
  rpc Calculate (haf80.api.campaign.CalculateScore) returns (haf80.api.campaign.UserCampaignInfo) {
    option (google.api.http) = {
      post: "/v1/calculate"
      body:"*"
    };
  }

  // Show scores
  rpc  GetScore(google.protobuf.Empty) returns (haf80.api.campaign.UserCampaignInfo) {
    option (google.api.http) = {
      get: "/v1/score"
    };
  }

  rpc GetChanceList(haf80.api.campaign.GetRequest) returns (haf80.api.campaign.UserChanceList){
    option (google.api.http) = {
      get:"/v1/chanceList"
    };
  }
}



message GetRequest {
  int32 page = 1;
  int32 pageSize = 2;
  int64 serviceId = 3;
}

message CalculateScore {
  int64 serviceId = 1;
  int64 price = 2;
}

message ChanceList {
  int64 startChanceCode = 1;
  int64 endChanceCode = 2;
  int32 count = 3;
}

message UserCampaignInfo{
  uint32 score = 1;
  uint32 chance = 2;
}

message UserChanceList{
  repeated ChanceList chances = 1;
}


service Club {
  rpc Banner (google.protobuf.Empty) returns (haf80.api.campaign.BannerResponse) {
    option (google.api.http) = {
      get: "/v1/banner"
    };
  }

  rpc Category (google.protobuf.Empty) returns (haf80.api.campaign.CategoryResponse) {
    option (google.api.http) = {
      get: "/v1/club/event/category"
    };
  }

  rpc Event (google.protobuf.Empty) returns (haf80.api.campaign.EventResponse) {
    option (google.api.http) = {
      get: "/v1/club/event"
    };
  }

  rpc PredictionEventGroup (haf80.api.campaign.EventGroupRequest) returns (haf80.api.campaign.PredictionEventGroupResponse) {
    option (google.api.http) = {
      get: "/v1/club/event/group/prediction/{id}"
    };
  }

  rpc LotteryEventGroup (haf80.api.campaign.EventGroupRequest) returns (haf80.api.campaign.LotteryEventGroupResponse) {
    option (google.api.http) = {
      get: "/v1/club/event/group/lottery/{id}"
    };
  }

  rpc SpecialLotteryEventGroup (haf80.api.campaign.EventGroupRequest) returns (haf80.api.campaign.LotteryEventGroupResponse) {
    option (google.api.http) = {
      get: "/v1/club/event/group/specialottery/{id}"
    };
  }

  rpc VotingEventGroup (haf80.api.campaign.EventGroupRequest) returns (haf80.api.campaign.VotingEventGroupResponse) {
    option (google.api.http) = {
      get: "/v1/club/event/group/voting/{id}"
    };
  }

  rpc GroupCategory (haf80.api.campaign.GroupcategoryRequest) returns (haf80.api.campaign.GroupcategoryResponse) {
    option (google.api.http) = {
      get: "/v1/club/event/group/category/{id}"
    };
  }

  rpc PredictionVote (haf80.api.campaign.PredictionVoteRequest) returns (haf80.api.campaign.PredictionVoteResponse) {
    option (google.api.http) = {
      post: "/v1/club/event/group/prediction/vote"
      body: "*"
    };
  }

  rpc VotingVote (haf80.api.campaign.VotingVoteRequest) returns (haf80.api.campaign.VotingVoteResponse) {
    option (google.api.http) = {
      post: "/v1/club/event/group/voting/vote"
      body: "*"
    };
  }

  rpc Media (haf80.api.campaign.MediaRequest) returns (haf80.api.campaign.MediaResponse) {
    option (google.api.http) = {
      get: "/v1/club/media/{type}/{id}"
    };
  }
}


message BannerResponse {
  message Banner {
    int64 id = 1;
    int64 eventId = 2;
    string image = 3;
    string type = 4;
    string status = 5;
  }
  repeated Banner data = 1;
}

message CategoryResponse {
  message Category {
    int64 id = 1;
    string name = 2;
  }
  repeated Category data = 1;
}

enum EventType {
  prediction = 0;
  lottery = 1;
  voting = 3;
  specialottery = 4;
}

enum PageType {
  single = 0;
  multiple = 1;
}


message EventResponse {
  message Event{
    int64 id = 1;
    string title = 2;
    string subTitle = 3;
    string image = 4;
    string cover = 5;
    string description = 6;
    int64 categoryId = 7;
    EventType eventType = 8;
    PageType pageType = 9;
    string status = 14;
    string video = 11;
    string startAt = 13;
    string endAt = 12;
  }

  repeated Event data = 1;
}

message EventGroupRequest {
  int64 id = 1;
}

message GroupcategoryRequest {
  int64 id = 1;
}


enum Type {
  general = 0;
  accurate = 1;
  combination = 2;
}

message PredictionEventGroupResponse {
  message Group {
    message Vote {
      message Item {
        int64 id = 1;
        int64 count = 2;
      }
      int64 itemId = 1;
      repeated Item data = 2;
      string status = 3; // success in Prediction or not
    }
    int64 id = 1;
    string title = 2;
    string cover = 3;
    string status = 6; // enabled, disabled
    int64 categoryId = 7;
    string startAt = 8;
    string endAt = 9;
    Type type = 10; // for group model Predictions
    string description = 11;
    repeated Item data = 12;
    bool isVoted = 13;
    Vote vote = 14;
  }

  message Item {
    int64 id = 1;
    string title = 2;
    string description = 4;
    string image = 3;
  }
  repeated Group data = 1;
}


message LotteryEventGroupResponse {
  message Group {
    int64 id = 1;
    string image = 3;
    string status = 4; // enabled, disabled
    repeated Item data = 5;
    int64 categoryId = 6;
  }

  message Item {
    int64 id = 1;
    string title = 9;
    string description = 2;
    uint32 code = 4;
    string image = 5;
    string status = 7;
    string data = 8;
  }
  repeated Group data = 1;
}

message VotingEventGroupResponse {
  message Group {
    int64 id = 1;
    string title = 2;
    string image = 4;
    string cover = 3;
    string status = 6; // enabled, disabled
    int64 categoryId = 7;
    string startAt = 8;
    string endAt = 9;
    string description = 11;
    repeated Item data = 12;
    repeated uint64 vote = 13;
  }

  message Item {
    int64 id = 1;
    string title = 2;
    string image = 3;
    string video = 4;
    string status = 5;
    uint32 progress = 6; // the Progress users selected in Accurate
    bool showProgress = 7;
  }
  repeated Group data = 1;
}

message GroupcategoryResponse {
  message Category {
    int64 id = 1;
    string name = 2;
    bool enabled = 3;
  }
  repeated Category data = 1;
}

message PredictionVoteRequest {
  message Item {
    uint64 id = 1;
    uint64 counter = 2;
  }
  uint64 groupId = 1;
  uint64 itemId = 2;
  repeated Item data = 3;
  Type type = 4; // for group model General fill itemId, for Accurate fill data for Combination fill all
}

message PredictionVoteResponse {
  string message = 1;
}

message VotingVoteRequest {
  int64 itemId = 1;
  int64 groupId = 2;
}

message VotingVoteResponse {
  string message = 1;
}

message MediaRequest {
  enum Type {
    group = 0;
    item = 1;
  }
  int64 id = 1;
  Type type = 2;
}

message MediaResponse {
  message Media {
    string url = 1;
    string type = 2;
    string place = 3;
  }
  repeated Media data = 1;
}