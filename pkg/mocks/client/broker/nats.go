// Code generated by MockGen. DO NOT EDIT.
// Source: ./nats_dao.go

// Package mock_broker is a generated GoMock package.
package mock_broker

import (
	context "context"
	config "micro/config"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	nats "github.com/nats-io/nats.go"
	zap "go.uber.org/zap"
)

// MockNatsBroker is a mock of NatsBroker interface.
type MockNatsBroker struct {
	ctrl     *gomock.Controller
	recorder *MockNatsBrokerMockRecorder
}

// MockNatsBrokerMockRecorder is the mock recorder for MockNatsBroker.
type MockNatsBrokerMockRecorder struct {
	mock *MockNatsBroker
}

// NewMockNatsBroker creates a new mock instance.
func NewMockNatsBroker(ctrl *gomock.Controller) *MockNatsBroker {
	mock := &MockNatsBroker{ctrl: ctrl}
	mock.recorder = &MockNatsBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNatsBroker) EXPECT() *MockNatsBrokerMockRecorder {
	return m.recorder
}

// Conn mocks base method.
func (m *MockNatsBroker) Conn() *nats.EncodedConn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conn")
	ret0, _ := ret[0].(*nats.EncodedConn)
	return ret0
}

// Conn indicates an expected call of Conn.
func (mr *MockNatsBrokerMockRecorder) Conn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conn", reflect.TypeOf((*MockNatsBroker)(nil).Conn))
}

// Connect mocks base method.
func (m *MockNatsBroker) Connect(conf config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", conf)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockNatsBrokerMockRecorder) Connect(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockNatsBroker)(nil).Connect), conf)
}

// ErrorReporter mocks base method.
func (m *MockNatsBroker) ErrorReporter(log *zap.Logger) nats.ErrHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorReporter", log)
	ret0, _ := ret[0].(nats.ErrHandler)
	return ret0
}

// ErrorReporter indicates an expected call of ErrorReporter.
func (mr *MockNatsBrokerMockRecorder) ErrorReporter(log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorReporter", reflect.TypeOf((*MockNatsBroker)(nil).ErrorReporter), log)
}

// Publish mocks base method.
func (m *MockNatsBroker) Publish(ctx context.Context, subject string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, subject, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockNatsBrokerMockRecorder) Publish(ctx, subject, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNatsBroker)(nil).Publish), ctx, subject, value)
}

// RecvChan mocks base method.
func (m *MockNatsBroker) RecvChan(subject string, ch chan interface{}) (*nats.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvChan", subject, ch)
	ret0, _ := ret[0].(*nats.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecvChan indicates an expected call of RecvChan.
func (mr *MockNatsBrokerMockRecorder) RecvChan(subject, ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvChan", reflect.TypeOf((*MockNatsBroker)(nil).RecvChan), subject, ch)
}

// RecvGroup mocks base method.
func (m *MockNatsBroker) RecvGroup(subject, queue string, callBack nats.Handler) (*nats.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvGroup", subject, queue, callBack)
	ret0, _ := ret[0].(*nats.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecvGroup indicates an expected call of RecvGroup.
func (mr *MockNatsBrokerMockRecorder) RecvGroup(subject, queue, callBack interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvGroup", reflect.TypeOf((*MockNatsBroker)(nil).RecvGroup), subject, queue, callBack)
}

// RequestWithContext mocks base method.
func (m *MockNatsBroker) RequestWithContext(ctx context.Context, subject string, v, vPtr interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWithContext", ctx, subject, v, vPtr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestWithContext indicates an expected call of RequestWithContext.
func (mr *MockNatsBrokerMockRecorder) RequestWithContext(ctx, subject, v, vPtr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithContext", reflect.TypeOf((*MockNatsBroker)(nil).RequestWithContext), ctx, subject, v, vPtr)
}

// RequestWithReply mocks base method.
func (m *MockNatsBroker) RequestWithReply(subject string, req interface{}, resp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWithReply", subject, req, resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestWithReply indicates an expected call of RequestWithReply.
func (mr *MockNatsBrokerMockRecorder) RequestWithReply(subject, req, resp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithReply", reflect.TypeOf((*MockNatsBroker)(nil).RequestWithReply), subject, req, resp)
}

// SendByContext mocks base method.
func (m *MockNatsBroker) SendByContext(ctx context.Context, subject string, req, resp interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendByContext", ctx, subject, req, resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendByContext indicates an expected call of SendByContext.
func (mr *MockNatsBrokerMockRecorder) SendByContext(ctx, subject, req, resp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendByContext", reflect.TypeOf((*MockNatsBroker)(nil).SendByContext), ctx, subject, req, resp)
}

// SendChan mocks base method.
func (m *MockNatsBroker) SendChan(subject string, ch chan interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendChan", subject, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendChan indicates an expected call of SendChan.
func (mr *MockNatsBrokerMockRecorder) SendChan(subject, ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChan", reflect.TypeOf((*MockNatsBroker)(nil).SendChan), subject, ch)
}

// Subscribe mocks base method.
func (m *MockNatsBroker) Subscribe(subject string, callBack func(*nats.Msg)) (*nats.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", subject, callBack)
	ret0, _ := ret[0].(*nats.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockNatsBrokerMockRecorder) Subscribe(subject, callBack interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockNatsBroker)(nil).Subscribe), subject, callBack)
}
