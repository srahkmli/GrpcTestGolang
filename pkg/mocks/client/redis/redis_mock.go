// Code generated by MockGen. DO NOT EDIT.
// Source: redis_dao.go

// Package mock_redis is a generated GoMock package.
package mock_redis

import (
	context "context"
	config "micro/config"
	reflect "reflect"
	time "time"

	redis "github.com/go-redis/redis/v8"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockStore) Connect(config config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockStoreMockRecorder) Connect(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockStore)(nil).Connect), config)
}

// Del mocks base method.
func (m *MockStore) Del(ctx context.Context, key ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range key {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockStoreMockRecorder) Del(ctx interface{}, key ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, key...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockStore)(nil).Del), varargs...)
}

// DelWithPattern mocks base method.
func (m *MockStore) DelWithPattern(ctx context.Context, pattern string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelWithPattern", ctx, pattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelWithPattern indicates an expected call of DelWithPattern.
func (mr *MockStoreMockRecorder) DelWithPattern(ctx, pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelWithPattern", reflect.TypeOf((*MockStore)(nil).DelWithPattern), ctx, pattern)
}

// Get mocks base method.
func (m *MockStore) Get(ctx context.Context, key string, dest interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockStoreMockRecorder) Get(ctx, key, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStore)(nil).Get), ctx, key, dest)
}

// Set mocks base method.
func (m *MockStore) Set(ctx context.Context, key string, value interface{}, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStoreMockRecorder) Set(ctx, key, value, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStore)(nil).Set), ctx, key, value, duration)
}

// SetClient mocks base method.
func (m *MockStore) SetClient(client *redis.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClient", client)
}

// SetClient indicates an expected call of SetClient.
func (mr *MockStoreMockRecorder) SetClient(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClient", reflect.TypeOf((*MockStore)(nil).SetClient), client)
}
