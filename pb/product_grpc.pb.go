// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pb/product.proto

package grpcTest

import (
	context "context"
	"github.com/srahkmli/grpcTest/controller"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductShoppingClient is the client API for ProductShopping service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductShoppingClient interface {
	SaveProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Empty, error)
	GetProduct(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Product, error)
}

type productShoppingClient struct {
	cc grpc.ClientConnInterface
}

func NewProductShoppingClient(cc grpc.ClientConnInterface) ProductShoppingClient {
	return &productShoppingClient{cc}
}

func (c *productShoppingClient) SaveProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.ProductShopping/SaveProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productShoppingClient) GetProduct(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/pb.ProductShopping/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductShoppingServer is the server API for ProductShopping service.
// All implementations must embed UnimplementedProductShoppingServer
// for forward compatibility
type ProductShoppingServer interface {
	SaveProduct(context.Context, *Product) (*Empty, error)
	GetProduct(context.Context, *Point) (*Product, error)
	mustEmbedUnimplementedProductShoppingServer()
}

// UnimplementedProductShoppingServer must be embedded to have forward compatible implementations.
type UnimplementedProductShoppingServer struct {
}

func (UnimplementedProductShoppingServer) SaveProduct(context.Context, *Product) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveProduct not implemented")
}
func (UnimplementedProductShoppingServer) GetProduct(context.Context, *Point) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedProductShoppingServer) mustEmbedUnimplementedProductShoppingServer() {}

// UnsafeProductShoppingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductShoppingServer will
// result in compilation errors.
type UnsafeProductShoppingServer interface {
	mustEmbedUnimplementedProductShoppingServer()
}

func RegisterProductShoppingServer(s grpc.ServiceRegistrar, srv *controller.ProductController) {
	s.RegisterService(&ProductShopping_ServiceDesc, srv)
}

func _ProductShopping_SaveProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductShoppingServer).SaveProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductShopping/SaveProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductShoppingServer).SaveProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductShopping_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductShoppingServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductShopping/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductShoppingServer).GetProduct(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductShopping_ServiceDesc is the grpc.ServiceDesc for ProductShopping service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductShopping_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ProductShopping",
	HandlerType: (*ProductShoppingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveProduct",
			Handler:    _ProductShopping_SaveProduct_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _ProductShopping_GetProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/product.proto",
}
