// Code generated by MockGen. DO NOT EDIT.
// Source: client/etcd/etcd_dao.go

// Package mock_etcd is a generated GoMock package.
package mock_etcd

import (
	config "micro/config"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mvccpb "go.etcd.io/etcd/api/v3/mvccpb"
	clientv3 "go.etcd.io/etcd/client/v3"
	context "golang.org/x/net/context"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockStore) Connect(conf config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", conf)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockStoreMockRecorder) Connect(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockStore)(nil).Connect), conf)
}

// GetClient mocks base method.
func (m *MockStore) GetClient() *clientv3.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*clientv3.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockStoreMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockStore)(nil).GetClient))
}

// GetKey mocks base method.
func (m *MockStore) GetKey(ctx context.Context, key string, callBack func(*mvccpb.KeyValue), options ...clientv3.OpOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key, callBack}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKey", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetKey indicates an expected call of GetKey.
func (mr *MockStoreMockRecorder) GetKey(ctx, key, callBack interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key, callBack}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockStore)(nil).GetKey), varargs...)
}

// Put mocks base method.
func (m *MockStore) Put(ctx context.Context, key string, value interface{}, options ...clientv3.OpOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key, value}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockStoreMockRecorder) Put(ctx, key, value interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key, value}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStore)(nil).Put), varargs...)
}

// WatchKey mocks base method.
func (m *MockStore) WatchKey(ctx context.Context, key string, callBack func(*clientv3.Event), options ...clientv3.OpOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key, callBack}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "WatchKey", varargs...)
}

// WatchKey indicates an expected call of WatchKey.
func (mr *MockStoreMockRecorder) WatchKey(ctx, key, callBack interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key, callBack}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchKey", reflect.TypeOf((*MockStore)(nil).WatchKey), varargs...)
}
